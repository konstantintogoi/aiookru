{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aiookru aiookru is a python ok.ru API wrapper. The main features are: authorization ( Authorization Code , Password Grant , Refresh Token ) REST API methods Usage To use ok.ru API you need a registered app and ok.ru account. For more details, see aiookru Documentation . Client application Use ClientSession when REST API is needed in: client component of the client-server application standalone mobile/desktop application i.e. when you embed your app's info (application key) in publicly available code. from aiookru import ClientSession , API session = ClientSession ( app_id , app_key , access_token , session_secret_key ) api = API ( session ) events = await api . events . get () friends = await api . friends . get () Pass session_secret_key and access_token that were received after authorization. For more details, see authorization instruction . Server application Use ServerSession when REST API is needed in: server component of the client-server application requests from your servers from aiookru import ServerSession , API session = ServerSession ( app_id , app_key , app_secret_key , access_token ) api = API ( session ) events = await api . events . get () friends = await api . friends . get () Pass app_secret_key and access_token that was received after authorization. For more details, see authorization instruction . Installation pip install aiookru or python setup.py install Supported Python Versions Python 3.5, 3.6, 3.7 and 3.8 are supported. Test Run all tests. python setup.py test Run tests with PyTest. python -m pytest [ -k TEST_NAME ] License aiookru is released under the BSD 2-Clause License.","title":"Home"},{"location":"#aiookru","text":"aiookru is a python ok.ru API wrapper. The main features are: authorization ( Authorization Code , Password Grant , Refresh Token ) REST API methods","title":"aiookru"},{"location":"#usage","text":"To use ok.ru API you need a registered app and ok.ru account. For more details, see aiookru Documentation .","title":"Usage"},{"location":"#client-application","text":"Use ClientSession when REST API is needed in: client component of the client-server application standalone mobile/desktop application i.e. when you embed your app's info (application key) in publicly available code. from aiookru import ClientSession , API session = ClientSession ( app_id , app_key , access_token , session_secret_key ) api = API ( session ) events = await api . events . get () friends = await api . friends . get () Pass session_secret_key and access_token that were received after authorization. For more details, see authorization instruction .","title":"Client application"},{"location":"#server-application","text":"Use ServerSession when REST API is needed in: server component of the client-server application requests from your servers from aiookru import ServerSession , API session = ServerSession ( app_id , app_key , app_secret_key , access_token ) api = API ( session ) events = await api . events . get () friends = await api . friends . get () Pass app_secret_key and access_token that was received after authorization. For more details, see authorization instruction .","title":"Server application"},{"location":"#installation","text":"pip install aiookru or python setup.py install","title":"Installation"},{"location":"#supported-python-versions","text":"Python 3.5, 3.6, 3.7 and 3.8 are supported.","title":"Supported Python Versions"},{"location":"#test","text":"Run all tests. python setup.py test Run tests with PyTest. python -m pytest [ -k TEST_NAME ]","title":"Test"},{"location":"#license","text":"aiookru is released under the BSD 2-Clause License.","title":"License"},{"location":"authorization/","text":"Authorization The preferred way to authorize is an :code: async with statement. After authorization the session will have the following attributes: :code: access_token aka :code: session_key , always :code: session_secret_key if Password Grant used :code: token_type if Code Grant / Refresh Token Grant used :code: refresh_token if Code Grant used :code: expires_in if Code Grant / Refresh Token Grant used Authorization Code Grant from aiookru import CodeSession , API app_id = 123456 app_key = 'abcde' app_secret_key = 'xyz' async with CodeSession ( app_id , app_key , app_secret_key , code , redirect_uri ) as session : api = API ( session ) ... About OAuth 2.0 Authorization Code Grant: https://oauth.net/2/grant-types/authorization-code/ For more details, see https://apiok.ru/ext/oauth/server Password Grant from aiookru import PasswordSession , API app_id = 123456 app_key = 'abcde' app_secret_key = '' async with PasswordSession ( app_id , app_key , app_secret_key , login , passwd ) as session : api = API ( session ) ... About OAuth 2.0 Password Grant: https://oauth.net/2/grant-types/password/ Refresh Token from aiookru import RefreshSession , API app_id = 123456 app_key = 'abcde' app_secret_key = 'xyz' async with RefreshSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ... About OAuth 2.0 Refresh Token: https://oauth.net/2/grant-types/refresh-token/ For more details, see https://apiok.ru/ext/oauth/server","title":"Authorization"},{"location":"authorization/#authorization","text":"The preferred way to authorize is an :code: async with statement. After authorization the session will have the following attributes: :code: access_token aka :code: session_key , always :code: session_secret_key if Password Grant used :code: token_type if Code Grant / Refresh Token Grant used :code: refresh_token if Code Grant used :code: expires_in if Code Grant / Refresh Token Grant used","title":"Authorization"},{"location":"authorization/#authorization-code-grant","text":"from aiookru import CodeSession , API app_id = 123456 app_key = 'abcde' app_secret_key = 'xyz' async with CodeSession ( app_id , app_key , app_secret_key , code , redirect_uri ) as session : api = API ( session ) ... About OAuth 2.0 Authorization Code Grant: https://oauth.net/2/grant-types/authorization-code/ For more details, see https://apiok.ru/ext/oauth/server","title":"Authorization Code Grant"},{"location":"authorization/#password-grant","text":"from aiookru import PasswordSession , API app_id = 123456 app_key = 'abcde' app_secret_key = '' async with PasswordSession ( app_id , app_key , app_secret_key , login , passwd ) as session : api = API ( session ) ... About OAuth 2.0 Password Grant: https://oauth.net/2/grant-types/password/","title":"Password Grant"},{"location":"authorization/#refresh-token","text":"from aiookru import RefreshSession , API app_id = 123456 app_key = 'abcde' app_secret_key = 'xyz' async with RefreshSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ... About OAuth 2.0 Refresh Token: https://oauth.net/2/grant-types/refresh-token/ For more details, see https://apiok.ru/ext/oauth/server","title":"Refresh Token"},{"location":"getting_started/","text":"Getting Started Installation If you use pip, just type $ pip install aiookru You can install from the source code like $ git clone https://github.com/KonstantinTogoi/aiookru.git $ cd aiookru $ python setup.py install Account To create an app you need to: Sign up in ok.Ru and link an email to your account to receive emails with app data. Obtain developer rights at https://ok.ru/devaccess. After obtaining developer rights you will get a link to add apps or external sites. Open Games and select \"My downloads\" on top. Application After signing up visit the OK.Ru REST API documentation page and create a new application: https://apiok.ru/en/dev/app/create. To use client OAuth authentication it must be enabled in the app settings. Save app_id (aka application_id ), app_key (aka application_key ) and app_secret_key (aka application_secret_key ) for user authorization and executing API requests. app_id = 'your_client_id' app_key = 'your_private_key' app_secret_key = 'your_secret_key'","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installation","text":"If you use pip, just type $ pip install aiookru You can install from the source code like $ git clone https://github.com/KonstantinTogoi/aiookru.git $ cd aiookru $ python setup.py install","title":"Installation"},{"location":"getting_started/#account","text":"To create an app you need to: Sign up in ok.Ru and link an email to your account to receive emails with app data. Obtain developer rights at https://ok.ru/devaccess. After obtaining developer rights you will get a link to add apps or external sites. Open Games and select \"My downloads\" on top.","title":"Account"},{"location":"getting_started/#application","text":"After signing up visit the OK.Ru REST API documentation page and create a new application: https://apiok.ru/en/dev/app/create. To use client OAuth authentication it must be enabled in the app settings. Save app_id (aka application_id ), app_key (aka application_key ) and app_secret_key (aka application_secret_key ) for user authorization and executing API requests. app_id = 'your_client_id' app_key = 'your_private_key' app_secret_key = 'your_secret_key'","title":"Application"},{"location":"session/","text":"Session The session makes GET requests when you call instances of APIMethod class that are returned as attributes of an API instance. Request By default, the session ( CodeSession , PasswordSession , RefreshSession ) tries to infer which signature generation circuit to use: if app_secret_key is not empty string - server-server signature generation circuit is used else if session_secret_key is not empty string - client-server signature generation circuit is used else exception is raised You can explicitly set a signature generation circuit for signing requests by passing to API one of the sessions below. Client-Server signature generation circuit Let's consider the following example of API request with client-server signature: from aiookru import TokenSession , API session = TokenSession ( app_id = 123456 , app_key = 'ABCDEFGHIGKLMNOPK' , app_secret_key = '' , access_token = '-s-2GUXOAvQYI7-RfxsZtV1wezsdtVPv92xfuaSQ8.SAIV1O2ywYra2-3ywes5St2yvcuZSr9UUWN2TtbWtWKVTuAy8' , session_secret_key = 'ae5362b5b588cc7294c2414d71b74d5d' , ) api = API ( session ) events = await api . events . get () It is equivalent to GET request: https://api.ok.ru/fb.do ?application_key = ABCDEFGHIGKLMNOPK & format = json & method = events.get & sig = 03a41413523ea8092507949d6e711963 & access_token = -s-2GUXOAvQYI7-RfxsZtV1wezsdtVPv92xfuaSQ8.SAIV1O2ywYra2-3ywes5St2yvcuZSr9UUWN2TtbWtWKVTuAy8 The following steps were taken: session_secret_key used as secret key sorted request parameters and secret key were concatenated: application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getae5362b5b588cc7294c2414d71b74d5d signature 03a41413523ea8092507949d6e711963 calculated as MD5 of the previous string signature appended to GET request parameters access_token appended to GET request parameters ClientSession For making requests with session_secret_key and access_token . from aiookru import ClientSession , API session = ClientSession ( app_id , app_key , access_token , session_secret_key ) api = API ( session ) ... Server-Server signature generation circuit Let's consider the following example of API request with server-server signature: from aiookru import TokenSession , API session = TokenSession ( app_id = 123456 , app_key = 'ABCDEFGHIGKLMNOPK' , app_secret_key = 'ABC123DEF456GHI789JKL123' , access_token = '-s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7' , session_secret_key = '' , ) api = API ( session ) events = await api . events . get () It is equivalent to GET request: https://api.ok.ru/fb.do ?application_key = ABCDEFGHIGKLMNOPK & format = json & method = events.get & sig = 232c8eb921951c4dba9b72606f9ddb4c & access_token = -s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7 The following steps were taken: b1a2b89707a94624c43afae67d59274c used as secret key, it was calculated as MD5( access_token + app_secret_key ) sorted request parameters and secret key were concatenated: application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getb1a2b89707a94624c43afae67d59274c signature 232c8eb921951c4dba9b72606f9ddb4c calculated as MD5 of the previous string signature appended to GET request parameters access_token appended to GET request parameters ServerSession For making requests with app_secret_key and access_token . from aiookru import ServerSession , API session = ServerSession ( app_id , app_key , app_secret_key , access_token ) api = API ( session ) ... CodeSession Server session with authorization with Authorization Code . from aiookru import CodeSession , API async with CodeSession ( app_id , app_key , app_secret_key , code , redirect_uri ) as session : api = API ( session ) ... PasswordSession Server session with authorization with logn and password `. from aiookru import PasswordSession , API async with PasswordSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ... RefreshSession Server session with authorization with Refresh Token . from aiookru import RefreshSession , API async with RefreshSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ...","title":"Session"},{"location":"session/#session","text":"The session makes GET requests when you call instances of APIMethod class that are returned as attributes of an API instance.","title":"Session"},{"location":"session/#request","text":"By default, the session ( CodeSession , PasswordSession , RefreshSession ) tries to infer which signature generation circuit to use: if app_secret_key is not empty string - server-server signature generation circuit is used else if session_secret_key is not empty string - client-server signature generation circuit is used else exception is raised You can explicitly set a signature generation circuit for signing requests by passing to API one of the sessions below.","title":"Request"},{"location":"session/#client-server-signature-generation-circuit","text":"Let's consider the following example of API request with client-server signature: from aiookru import TokenSession , API session = TokenSession ( app_id = 123456 , app_key = 'ABCDEFGHIGKLMNOPK' , app_secret_key = '' , access_token = '-s-2GUXOAvQYI7-RfxsZtV1wezsdtVPv92xfuaSQ8.SAIV1O2ywYra2-3ywes5St2yvcuZSr9UUWN2TtbWtWKVTuAy8' , session_secret_key = 'ae5362b5b588cc7294c2414d71b74d5d' , ) api = API ( session ) events = await api . events . get () It is equivalent to GET request: https://api.ok.ru/fb.do ?application_key = ABCDEFGHIGKLMNOPK & format = json & method = events.get & sig = 03a41413523ea8092507949d6e711963 & access_token = -s-2GUXOAvQYI7-RfxsZtV1wezsdtVPv92xfuaSQ8.SAIV1O2ywYra2-3ywes5St2yvcuZSr9UUWN2TtbWtWKVTuAy8 The following steps were taken: session_secret_key used as secret key sorted request parameters and secret key were concatenated: application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getae5362b5b588cc7294c2414d71b74d5d signature 03a41413523ea8092507949d6e711963 calculated as MD5 of the previous string signature appended to GET request parameters access_token appended to GET request parameters","title":"Client-Server signature generation circuit"},{"location":"session/#clientsession","text":"For making requests with session_secret_key and access_token . from aiookru import ClientSession , API session = ClientSession ( app_id , app_key , access_token , session_secret_key ) api = API ( session ) ...","title":"ClientSession"},{"location":"session/#server-server-signature-generation-circuit","text":"Let's consider the following example of API request with server-server signature: from aiookru import TokenSession , API session = TokenSession ( app_id = 123456 , app_key = 'ABCDEFGHIGKLMNOPK' , app_secret_key = 'ABC123DEF456GHI789JKL123' , access_token = '-s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7' , session_secret_key = '' , ) api = API ( session ) events = await api . events . get () It is equivalent to GET request: https://api.ok.ru/fb.do ?application_key = ABCDEFGHIGKLMNOPK & format = json & method = events.get & sig = 232c8eb921951c4dba9b72606f9ddb4c & access_token = -s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7 The following steps were taken: b1a2b89707a94624c43afae67d59274c used as secret key, it was calculated as MD5( access_token + app_secret_key ) sorted request parameters and secret key were concatenated: application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getb1a2b89707a94624c43afae67d59274c signature 232c8eb921951c4dba9b72606f9ddb4c calculated as MD5 of the previous string signature appended to GET request parameters access_token appended to GET request parameters","title":"Server-Server signature generation circuit"},{"location":"session/#serversession","text":"For making requests with app_secret_key and access_token . from aiookru import ServerSession , API session = ServerSession ( app_id , app_key , app_secret_key , access_token ) api = API ( session ) ...","title":"ServerSession"},{"location":"session/#codesession","text":"Server session with authorization with Authorization Code . from aiookru import CodeSession , API async with CodeSession ( app_id , app_key , app_secret_key , code , redirect_uri ) as session : api = API ( session ) ...","title":"CodeSession"},{"location":"session/#passwordsession","text":"Server session with authorization with logn and password `. from aiookru import PasswordSession , API async with PasswordSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ...","title":"PasswordSession"},{"location":"session/#refreshsession","text":"Server session with authorization with Refresh Token . from aiookru import RefreshSession , API async with RefreshSession ( app_id , app_key , app_secret_key , refresh_token ) as session : api = API ( session ) ...","title":"RefreshSession"}]}