{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aiookru","title":"aiookru","text":"<p>aiookru is a python ok.ru API wrapper. The main features are:</p> <ul> <li>authorization (Authorization Code, Refresh Token)</li> <li>REST API methods</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>To use ok.ru API you need a registered app and an <code>access_token</code></p> <pre><code>import aiookru\nclient_id = '12345678'\napplication_key = 'ABCDEFGHIJKLMNOPQ'\napplication_secret_key = '0A1B2C3D4E5F6G7H8I9K10L11M12N13O14P15Q'\nredirect_uri = 'http://apiok.ru/oauth_callback'\ncode = ''  # get code from login form\nasync with aiookru.CodeGrant(client_id, application_secret_key, redirect_uri, code) as grant:\naccess_token = grant.access_token\nrefresh_token = grant.refresh_token\nasync with aiookru.API(access_token, application_key, application_secret_key=application_secret_key) as okru:\nevents = await okru.events.get()\nasync with aiookru.RefreshGrant(client_id, application_secret_key, refresh_token) as grant:\naccess_token = grant.access_token\n</code></pre> <p>For more details, see authorization instruction.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install aiookru\n</code></pre>"},{"location":"#supported-python-versions","title":"Supported Python Versions","text":"<p>Python 3.7, 3.8, 3.9 are supported.</p>"},{"location":"#license","title":"License","text":"<p>aiookru is released under the BSD 2-Clause License.</p>"},{"location":"api/","title":"REST API","text":"<p>Methods: https://apiok.ru/en/dev/methods/rest.</p>"},{"location":"api/#executing-requests","title":"Executing requests","text":"<p><code>API</code> tries to infer which signature generation circuit to use:</p> <ul> <li>if <code>application_secret_key</code> is not empty string - server-server signature generation circuit is used</li> <li>if <code>session_secret_key</code> is not empty string - client-server signature generation circuit is used</li> </ul>"},{"location":"api/#server-server-signature-generation-circuit","title":"Server-Server signature generation circuit","text":"<pre><code>import aiookru\napplication_key = 'ABCDEFGHIGKLMNOPK'\napplication_secret_key = 'ABC123DEF456GHI789JKL123'\naccess_token = '-s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7'\nasync with aiookru.API(access_token, application_key, application_secret_key=application_secret_key) as okru:\nevents = await okru.events.get()\n</code></pre> <p>is equivalent to GET request:</p> <pre><code>https://api.ok.ru/fb.do\n    ?application_key=ABCDEFGHIGKLMNOPK\n    &amp;format=json\n    &amp;method=events.get\n    &amp;sig=232c8eb921951c4dba9b72606f9ddb4c\n    &amp;access_token=-s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7\n</code></pre> <p>The following steps were taken:</p> <ol> <li><code>b1a2b89707a94624c43afae67d59274c</code> used as secret key, it was calculated as MD5(<code>access_token</code> + <code>application_secret_key</code>)</li> <li>sorted request parameters and secret key were concatenated: <code>application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getb1a2b89707a94624c43afae67d59274c</code></li> <li>signature <code>232c8eb921951c4dba9b72606f9ddb4c</code> calculated as MD5 of the previous string</li> <li>signature appended to GET request parameters</li> <li><code>access_token</code> appended to GET request parameters</li> </ol>"},{"location":"api/#client-server-signature-generation-circuit","title":"Client-Server signature generation circuit","text":"<pre><code>import aiookru\napplication_key = 'ABCDEFGHIGKLMNOPK'\naccess_token = '-s-84W-s3egarWUsbkq-IWTucuedzTKT8VUXIA.s4Xx8IW7'\nsession_secret_key = 'ae5362b5b588cc7294c2414d71b74d5d'\nasync with aiookru.API(access_token, application_key, session_secret_key=session_secret_key) as okru:\nevents = await okru.events.get()\n</code></pre> <p>is equivalent to GET request:</p> <pre><code>GET https://api.ok.ru/fb.do\n    ?application_key=ABCDEFGHIGKLMNOPK\n    &amp;format=json\n    &amp;method=events.get\n    &amp;sig=03a41413523ea8092507949d6e711963\n    &amp;access_token=-s-2GUXOAvQYI7-RfxsZtV1wezsdtVPv92xfuaSQ8.SAIV1O2ywYra2-3ywes5St2yvcuZSr9UUWN2TtbWtWKVTuAy8\n</code></pre> <p>The following steps were taken:</p> <ol> <li><code>session_secret_key</code> used as secret key</li> <li>sorted request parameters and secret key were concatenated: <code>application_key=ABCDEFGHIGKLMNOPKformat=jsonmethod=events.getae5362b5b588cc7294c2414d71b74d5d</code></li> <li>signature <code>03a41413523ea8092507949d6e711963</code> calculated as MD5 of the previous string</li> <li>signature appended to GET request parameters</li> <li><code>access_token</code> appended to GET request parameters</li> </ol>"},{"location":"authorization/","title":"Authorization","text":"<p>The preferred way to authorize is an <code>async with</code> statement.</p>"},{"location":"authorization/#authorization-code-grant","title":"Authorization Code Grant","text":"<pre><code>import aiookru\nclient_id = '12345678'\napplication_secret_key = '0A1B2C3D4E5F6G7H8I9K10L11M12N13O14P15Q'\nredirect_uri = 'http://apiok.ru/oauth_callback'\ncode = ''  # get code from login form\nasync with aiookru.CodeGrant(client_id, application_secret_key, redirect_uri, code) as grant:\naccess_token = grant.access_token\nrefresh_token = grant.refresh_token\n</code></pre> <p>After authorization the <code>grant</code> will have the following attributes:</p> <ul> <li><code>access_token</code>,</li> <li><code>refresh_token</code>,</li> <li><code>expires_in</code>.</li> </ul> <p>About OAuth 2.0 Authorization Code Grant: https://oauth.net/2/grant-types/authorization-code/</p> <p>For more details, see https://apiok.ru/ext/oauth/server</p>"},{"location":"authorization/#refresh-grant","title":"Refresh Grant","text":"<pre><code>import aiookru\nclient_id = '12345678'\napplication_secret_key = '0A1B2C3D4E5F6G7H8I9K10L11M12N13O14P15Q'\nrefresh_token = 'refresh token'\nasync with aiookru.RefreshGrant(client_id, application_secret_key, refresh_token) as grant:\naccess_token = grant.access_token\n</code></pre> <p>After authorization the <code>grant</code> will have the following attributes:</p> <ul> <li><code>access_token</code>,</li> <li><code>token_type</code>,</li> <li><code>expires_in</code>.</li> </ul> <p>About OAuth 2.0 Refresh Token: https://oauth.net/2/grant-types/refresh-token/</p> <p>For more details, see https://apiok.ru/ext/oauth/server</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>If you use pip, just type</p> <pre><code>$ pip install aiookru\n</code></pre> <p>You can install from the source code like</p> <pre><code>$ git clone https://github.com/konstantintogoi/aiookru.git\n$ cd aiookru\n$ python setup.py install\n</code></pre>"},{"location":"getting_started/#account","title":"Account","text":"<p>To create an app you need to:</p> <ol> <li>Sign up in ok.Ru and link an email to your account to receive emails with app data.</li> <li>Obtain developer rights at https://ok.ru/devaccess.</li> </ol> <p>After obtaining developer rights you will get a link to add apps or external sites. Open Games and select \"My downloads\" on top.</p>"},{"location":"getting_started/#application","title":"Application","text":"<p>After signing up visit the OK.Ru REST API documentation page and create a new application: https://apiok.ru/en/dev/app/create.</p> <p>To use client OAuth authentication it must be enabled in the app settings.</p>"},{"location":"requests/","title":"Requests","text":"<p><code>aiookru</code> executes http requests with <code>httpx.AsyncClient</code>.</p>"},{"location":"requests/#request-format","title":"Request Format","text":"<p><code>httpx.AsyncClient</code> makes GET requests according to Request Format. For example:</p> <pre><code>GET https://api.ok.ru/fb.do?method=friends.get\n</code></pre>"},{"location":"requests/#response-format","title":"Response Format","text":"<pre><code>{\n\"response\": ...\n}\n</code></pre> <p>or</p> <pre><code>{\n\"error\": {\n\"error_code\": 1,\n\"error_msg\": \"Unknown error occurred\",\n\"request_params\": { ... }\n}\n}\n</code></pre>"}]}